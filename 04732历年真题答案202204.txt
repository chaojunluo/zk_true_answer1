个人整理
202204真题：
1,A  
2,D  IA-32 结构是指英特尔微处理器的32位结构，Intel Pentium4 微处理器采用了这种结构。
3,B  在 Intel 8086 微处理器中，BX 寄存器可用作基址寄存器。
4,D  引脚 AD15~ADO 在 Intel 8086 微处理器中被用作地址/数据复用线。这些引脚用于传输地址和数据信息，因此选项 D 中的 "地址/数据复用线" 是正确的。这些引脚在不同的操作中可以扮演地址或数据传输的角色，因此称为复用线。这种设计使得处理器在不同操作期间能够有效地利用同一组引脚。
5,A  db 字节 8bit（位），DW 字16bit,DD 双字32bit，DF 3字48bit ,DQ 4字 64bit，DT 五字80bit
6,D  XOR 指令可以实现位操作，通过与特定值进行异或运算可以实现位的取反操作。
7,A 
8,C  DRAM 是一种半导体存储器，它在存储单元中使用电容来存储数据。由于电容会逐渐失去充电，DRAM 需要定期刷新操作（定期充电），以防止数据丢失。因此，选项 C 中的DRAM 是正确的答案。 
9,A  I/O 接口是连接 CPU 和外部设备的逻辑部件，它通过总线进行数据和控制信号的传输。
10,D  直接存储器存取方式使用专门的 DMA（Direct Memory Access）控制器来完成数据传送，CPU 不需要干预。
 无条件传送方式：
在无条件传送方式中，数据传输是不受 CPU 控制的。外设可以在任何时候请求传输数据，而无需等待 CPU 的命令。这种方式可能会导致数据传输冲突或混乱，因为外设和 CPU 可能同时尝试访问相同的总线。

 中断传送方式：
中断传送方式中，外设通过向 CPU 发送中断请求信号来请求数据传输。CPU 在处理完当前指令后，会响应中断请求并暂停当前任务，切换到中断处理程序来处理外设的数据传输请求。中断传送方式允许外设异步地请求数据传输，但需要 CPU 进行响应和处理。

  程序查询方式：
在程序查询方式中，CPU 定期轮询外设，以确定是否有数据传输请求。CPU 轮流查询每个外设，如果发现某个外设有数据传输请求，就会处理该请求。这种方式需要 CPU 在循环中不断地查询外设，可能会浪费 CPU 资源。
 直接存储器存取方式（DMA）：
DMA 方式是一种不需要 CPU 干预的数据传输方式。外设可以通过 DMA 控制器直接访问内存，进行数据传输。CPU 初始化 DMA 控制器后，控制权交给 DMA 控制器，然后 CPU 可以继续执行其他任务。DMA 控制器管理数据传输，提高了传输效率，减轻了 CPU 的负担。
11,A
12,C 单步中断法实际上不涉及中断源的识别和优先判断。它用于控制 CPU 在每次执行指令后暂停，以便进行单步调试和观察程序的执行情况。它通常与中断系统中的其他机制无关。

其他选项：

A. 软件查法：由软件轮询检查中断源，存在一定的延迟。

B. 硬件询法：由硬件电路根据优先级判断中断源。

D. 请求线仲裁法：多个中断源使用请求线进行仲裁，优先级高的中断源会被优先响应。
13,C
A. 以是否统计均匀的时间间隔来区分：这个选项不正确。定时功能和计数功能都可以用来统计均匀或不均匀的时间间隔。
B. 可以通过写入控制存器来区分：这个选项不正确。写入控制存器是用来配置8254的工作方式和参数，而不是用来区分定时功能和计数功能。
C. 可以通过设定不同方式来区分：这个选项是正确的。8254有6种不同的工作方式，每种工作方式都可以用于实现特定的定时或计数功能。
D. 本质上是相同的工作方式：这个选项不正确。虽然定时功能和计数功能都是基于8254内部的计数器实现的，但它们在实现细节和应用场景上有所不同。
14,C 8254 有 6 种工作方式，其中只有 2、3 方式输出周期性的波形，0、1、4、5 方式则只输出单次波形。
15,C  

当外设向 CPU 发出中断请求后，作为中断响应的条件之一，CPU 必须先结束当前
的
A,指令周期
B,总线周期
C.机器周期
D,时钟期
16，C
17，
18，A
19，
20，
名词解释
21，外部存储器：

28，
0111 1000 0010 0101
0101 1010 0001 1111
1101 0010 0100 0100
溢出标志位 (OF): 对于有符号运算，当结果超出了表示范围时，OF会被设置。对于加法，这发生在以下情况：

两个正数相加得到一个负数。
两个负数相加得到一个正数。

结果是 
1101001001000100
1101001001000100 (二进制)，这与我们之前得到的 
�
24
4
�
D244 
H
​
  (十六进制)是一致的。

对于OF的影响:
从最高位（符号位）来看，两个数都是正数（因为它们的最高位都是0）。
结果的最高位也是1，这表示一个负数（如果我们按照二进制补码的方式来解释这个数）。
但是，这里的关键是，我们是在加两个正数，结果却是一个负数。这意味着有符号溢出发生了。因此，

OF=1。

对于ZF的影响:
结果 
1101001001000100
1101001001000100 显然不是零，所以零标志位不会被设置。

ZF=0。
综上，

OF=1 和 

0
ZF=0。
29，写入  读取
30，时钟信号 转换完成信号
简答题
31，运算器，控制器，存储器，输入设备，输出设备
工作原理是基于指令的存储和执行，程序和数据都以二进制形式存储在存储器中，控制器从存储器中取出指令，交给运算器逐条解码执行，
然后将结果存回存储器或者输出到外部设备
32，过程是一段可由别的程序调用的程序，执行完成后返回原调用处，
过程名 PROC [NEAR/FAR]
...
过程名 ENDP
34,
可屏蔽中断：
引脚：INTR
IF标志位：=1时响应，=0时不响应
优先级：需要使用8259A可编程中断控制器对多个中断按优先级排队，
不可屏蔽中断：
引脚：NMI
IF标志位：不受IF标志位的影响，不可屏蔽
优先级：NMI中断类型号固定为2，NMO中断到来后，当前指令一执行结束，就立即开始执行中断，不可屏蔽中断高于可屏蔽中断，通常用于处理必须立即响应的外部事件

35，
1，作为数据口
2，作 那么，为状态口
3，作为专用联络信号线
4，作按位控制用
36，
CLD 清空方向标志位，用于向前遍历
CMPSB 执行一次会比较两个字符串是否相等
REPZ执行一次时判断ZF是否等于1 不等于1则再执行一次比较代码段 等于则不再执行



 

37，
（1）
org 100h   ;指定程序的起始位置
mov ax,OABH
MOV DS:[0CH*4],AX

MOV AX,ODDH
MOV SD[0CH*4+2],AX

MOV AX,3CH
MOV DS:[0CH*4+4],AX

MOV AX,0F0H
MOV DS:[0CH*4+6],AX
RET     ;返回指令
我们需要将中断向量号乘以4，因为每个中断向量在中断向量表中占用4个字节。
mov ax, [0CH*4]
mov bx, [0CH*4+2]
这是因为每个中断向量在中断向量表中占用4个字节，其中前两个字节存储了入口地址的偏移量（IP），而后两个字节存储了入口地址的段地址（CS）。因此，我们需要使用 mov bx, [0CH*4+2] 来读取中断向量号 0CH 的中断处理子程序入口地址的段地址（CS），而不是使用 mov bx, [0CH*4+6]。

38，
（1），Intel 27128 是一种EPROM 可擦写可编程只读存储器芯片
（2），16K*8,所以容量是16Kb，
（3），74LS138 译码器的 3 根地址输入线（A0、A1 和 A2）可以产生 8 种不同的地址组合,寻址范围为 0 到 7，每个地址对应一个 2KB 区块的存储空间。
39，
（1）
MOV AL, 10011010B
OUT 83H, AL

（2）
AGAIN: IN AL, 82H ;读C口
TEST AL, 00010000B ;检测PC4
JNZ AGAIN ;若PC4高电平，则继续测试
IN AL, 80H ;读A口
NOT AL ;取反
OUT 81H, AL ;数据输出到B口
MOV AL, 00000110B
OUT 83H, AL ;PC3复位，输出低
NOP
MOV AL, 00001110B
OUT 83H, AL ;PC3置位，输出高

读用in 输出用Out   A,B,C对应80 81 82端口
读   IN AL,80
输出 OUT 80,AL
（3），74LS138 译码器的 3 根地址输入线（A0、A1 和 A2）可以产生 8 种不同的地址组合,寻址范围为 0 到 7，
每个地址对应一个 2KB 区块的存储空间。
39，控制字为 1001 1000B=098H
初始化程序为：MOV AL,098H
OUT 83H,AL
1:标志位 
00：A组选择方式，00=方式0 ，01=方式1，10/11=方式2
1：A口 0=输出，1=输入
1：C口高4为，0=输出，1=输入
0：B组方式选择 0=方式0，1=方式1
0：B口 0-输出 ，1=输入
0：C口低4为 0=输出，1=输入
